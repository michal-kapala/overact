datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

// GraphQL type generator off Prisma's schema
generator typegraphql {
  provider            = "typegraphql-prisma"
  output              = "../prisma/generated/type-graphql"
  emitTranspiledCode  = true
}

// NextAuth.js account model
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("ses_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js user model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // custom fields
  role          Role @default(USER)
}

// NextAuth.js verification token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User permission roles
enum Role {
  USER
  ADMIN
}

// Product model
model Product {
  id            String    @id @default(cuid())
  name          String    @unique
  price         Float
  image         String
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  colors        Color[]
  sizes         Size[]
}

// Product category model
model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  tags          String[]
  products      Product[]
}

// Product color model
model Color {
  id            String    @id @default(cuid())
  name          String    @unique
  rgb           String
  products      Product[]
}

// Product size model
model Size {
  id            String    @id @default(cuid())
  name          String    @unique
  size          String
  products      Product[]
}
